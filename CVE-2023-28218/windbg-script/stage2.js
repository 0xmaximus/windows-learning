"use strict";

function Log(s) {
    return host.diagnostics.debugLog(s + "\n");
}

function Exec(cmd) {
    return host.namespace.Debugger.Utility.Control.ExecuteCommand(cmd);
}

function findEprocess(imageName) {
    var pAddrOfPsActiveProcessHead = host.createTypedObject(host.getModuleSymbolAddress("nt", "PsActiveProcessHead"), "nt", "_LIST_ENTRY");
    var processIterator = host.namespace.Debugger.Utility.Collections.FromListEntry(pAddrOfPsActiveProcessHead, "nt!_EPROCESS", "ActiveProcessLinks");
    var targetProc = processIterator.Where(p => host.memory.readString(p.ImageFileName) == imageName).First();
    return targetProc.targetLocation;   
}

function findEthread(eProc) {
    var eProcObj = host.createTypedObject(eProc, "nt" , "_EPROCESS");
    var threadIter = host.namespace.Debugger.Utility.Collections.FromListEntry(eProcObj.ThreadListHead, "nt!_ETHREAD", "ThreadListEntry");
    return threadIter.First().targetLocation;
}

function invokeScript() {
    Log("[*] Start");
    Exec("bc *")
    let Control = host.namespace.Debugger.Utility.Control;
    var targetProc = findEprocess("exploit.exe");
    var targetThread = findEthread(targetProc);
    Log("[*] Found proc: " + targetProc);
    Log("[*] Found thread: " + targetThread);

    let bp1 = Control.SetBreakpointAtOffset('AfdCopyCMSGBuffer', 0x2b, 'afd');
    bp1.Condition = `@$proc == ${targetProc} && @r14d == 0xfffffffa`;
    bp1.Command = "r rbx ; be 1";  

    // break at exception handler
    let bp2 = Control.SetBreakpointAtOffset('AfdFastIoDeviceControl', 0x1572, 'afd');
    bp2.Condition = `@$proc == ${targetProc}`;
    bp2.IsEnabled = false;
    bp2.Command = "bd 0 1 ; be 2"

    // break at ethread.PreviousMode
    // var previousModeOffset = host.getModuleType("nt", "_KTHREAD").fields.PreviousMode.offset;
    // var previousModeAddr = targetThread.add(previousModeOffset);
    // Log("[*] Previous mode: " + previousModeAddr);
    // var targetAddr = previousModeAddr.add(0x30);
    // let bp3 = Control.SetBreakpointAtOffset("IopReplaceCompletionPort", 0x61, "nt");
    // bp3.Condition = `@$proc == ${targetProc} && @rcx == ${targetAddr} && @edx == 0x746C6644`;
    // bp3.IsEnabled = true;

    // Log(Object.keys(bp1));

    Log("[*] DONE");
    // Exec("g");
}
