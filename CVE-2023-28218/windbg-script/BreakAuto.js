"use strict";

function Log(s) {
    return host.diagnostics.debugLog(s + "\n");
}

function Exec(cmd) {
    return host.namespace.Debugger.Utility.Control.ExecuteCommand(cmd);
}

function findEprocess(imageName)
{
    var pAddrOfPsActiveProcessHead = host.createTypedObject(host.getModuleSymbolAddress("nt", "PsActiveProcessHead"), "nt", "_LIST_ENTRY");
    var processIterator = host.namespace.Debugger.Utility.Collections.FromListEntry(pAddrOfPsActiveProcessHead, "nt!_EPROCESS", "ActiveProcessLinks");
    var targetProc = processIterator.Where(p => host.memory.readString(p.ImageFileName) == imageName).First();
    return targetProc.targetLocation;   
//    for (var proc of process_iterator) {  
//       if (host.memory.readString(proc.ImageFileName) == imageName) {
//          return proc.targetLocation;
//       }
//    }
}

function invokeScript() {
    Log("[*] Start");
    Exec("bc *;")
    let Control = host.namespace.Debugger.Utility.Control;
    var targetProc = findEprocess("exploit.exe");
    Log("[*] Found proc: " + targetProc);

    let bp1 = Control.SetBreakpointAtOffset('AfdCopyCMSGBuffer', 0x2b, 'afd');
    bp1.Condition = `@$proc == ${targetProc}`;
    bp1.Command = "r r14 ; g";

    let bp2 = Control.SetBreakpointAtOffset('AfdComputeCMSGLength', 0x18, 'afd');
    bp2.Condition = `@$proc == ${targetProc}`;
    bp2.Command = "r r10 ; g";

    let bp3 = Control.SetBreakpointAtOffset('AfdCopyCMSGBuffer', 0x2b, 'afd');
    bp3.Condition = `@$proc == ${targetProc} && @r14d == 0xfffffffa`;
    Log(Object.keys(bp3));

    Log("[*] DONE");
    // Exec("g");
}
